//test commit 
1- install redis and create redis.js at root level 
redis.js 
const { createClient } = require("redis");
const redisClient = createClient();
redisClient.connect().catch(console.error);

module.exports = redisClient;

2- include it to app
require('./redis)

3- add it to router 
var client=require('../redis.js);

4- create a middleware for reading from cache 

async function cache(req, res, next) {
  
}

5- add it to route 
router.post('/',cache,async function(req,res,next ))


6- issue 
it always hit same data source: 
diagnostic 
The issue you're encountering, where subsequent fetches after the first one always return data from the first fetch (e.g., bbc.com), 
likely stems from the use of req.originalUrl in your caching strategy. Since your POST requests to /source always hit the same URL (/source), 
the cache key generated by req.originalUrl remains the same for all different source URLs. Therefore, after the first fetch and cache, 
all subsequent requests hit the cache for /source, regardless of the actual news source URL you intended to fetch.

To solve this issue, you need a more dynamic approach to generate unique cache keys based on the specific news source URLs being requested. 
One way to achieve this is by using the actual news source URL (contained in req.body.sourcebar) as part of the cache key. 
This ensures that each news source has its own unique cache entry.



additinonaly 
client side caching 
app.use(express.static(path.join(__dirname, 'public'), {
  maxAge:60*60*1000 // 1 hour
}));

and Cache busting
Without Cache Busting

<link rel="stylesheet" href="/css/style.css">
<script src="/js/script.js"></script>

With Cache Busting

<link rel="stylesheet" href="/css/style.css?v=2">
<script src="/js/script.js?v=2"></script>

7- add pagination it is matter now first added a pagination navbar and for example 
it shows when i press letter k http://localhost:3000/allSources?page=K
